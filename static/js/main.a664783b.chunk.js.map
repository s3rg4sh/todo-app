{"version":3,"sources":["types/Filter.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodosFilter/TodosFilter.tsx","types/ErrorMessage.ts","utils/fetchClient.ts","App.tsx","api/todos.ts","index.tsx"],"names":["Filter","TodoItem","todo","processingIds","onDelete","onUpdate","id","title","completed","useState","isEditing","setIsEditing","newTitle","setNewTitle","field","useRef","useEffect","current","focus","updateTitle","trim","className","cn","editing","htmlFor","type","onClick","toDo","onSubmit","e","preventDefault","data-cy","ref","placeholder","defaultValue","onChange","event","target","value","onBlur","onKeyUp","key","onDoubleClick","aria-label","includes","TodoList","todos","tempTodo","allTodos","map","ErrorMessage","TodosFilter","filterBy","setFilterBy","clearCompleted","handleSetFilteredTodos","filter","completedTodosLength","length","uncompletedTodosLength","href","selected","all","active","hidden","disabled","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","USER_ID","App","setTodos","isError","setIsError","error","setError","todoTitle","setTodoTitle","setTempTodo","setProcessingIds","showError","errorType","filteredTodos","useMemo","isAllCompleted","isAllUncompleted","resetField","handleDeleteTodo","todoId","currentTodos","catch","deleteError","finally","handleUpdateTodo","currentTodo","indexOfTodo","indexOf","userId","updateTodo","slice","updateError","loadError","newTodo","Math","max","createTodo","newToDo","addError","emptyTitle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a664783b.chunk.js","sourcesContent":["// eslint-disable-next-line no-shadow\nexport enum Filter {\n  all = 'all',\n  active = 'active',\n  completed = 'Completed',\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  processingIds: number[];\n  onDelete: (id: number) => void;\n  onUpdate: (todo: Todo) => void;\n};\n\nexport const TodoItem: React.FC<Props> = (\n  {\n    todo, processingIds, onDelete, onUpdate,\n  },\n) => {\n  const { id, title, completed } = todo;\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [newTitle, setNewTitle] = useState<string>(todo.title);\n  const field = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (field.current) {\n      field.current.focus();\n    }\n  }, [isEditing]);\n\n  const updateTitle = () => {\n    switch (newTitle.trim()) {\n      case '':\n        onDelete(todo.id);\n        break;\n      case todo.title:\n        setIsEditing(false);\n        break;\n      default:\n        onUpdate({ ...todo, title: newTitle });\n    }\n\n    setIsEditing(false);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    updateTitle();\n    setIsEditing(false);\n  };\n\n  const handleChecked = (toDo: Todo) => {\n    onUpdate({ ...toDo, completed: !toDo.completed });\n  };\n\n  const handleKeyUp = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Escape') {\n      setIsEditing(false);\n    }\n  };\n\n  return (\n    <li\n      className={cn(\n        'todo',\n        {\n          completed,\n          editing: isEditing,\n        },\n      )}\n    >\n      <label\n        className=\"todo__status-label\"\n        htmlFor={`toggle-view-${id}`}\n      >\n        <input\n          type=\"checkbox\"\n          className=\"todo__status\"\n          id={`toggle-view-${id}`}\n          onClick={() => handleChecked(todo)}\n        />\n      </label>\n      {isEditing ? (\n        <form onSubmit={handleSubmit}>\n          <input\n            data-cy=\"TodoTitleField\"\n            type=\"text\"\n            ref={field}\n            className=\"todo__title-field\"\n            placeholder=\"Empty todo will be deleted\"\n            defaultValue={todo.title}\n            onChange={event => setNewTitle(event.target.value)}\n            onBlur={updateTitle}\n            onKeyUp={handleKeyUp}\n          />\n        </form>\n      ) : (\n        <>\n          <span\n            className=\"todo__title\"\n            onDoubleClick={() => setIsEditing(true)}\n          >\n            {title}\n          </span>\n\n          <button\n            type=\"button\"\n            className=\"todo__remove\"\n            aria-label=\"Delete Todo\"\n            onClick={() => onDelete(id)}\n          >\n            x\n          </button>\n        </>\n      )}\n      <div\n        data-cy=\"TodoLoader\"\n        className={cn('modal overlay', {\n          'is-active': processingIds.includes(id),\n        })}\n      >\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </li>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[];\n  processingIds: number[];\n  onDelete: (id: number) => void;\n  onUpdate: (todo: Todo) => void;\n  tempTodo: Todo | null;\n};\n\nexport const TodoList: React.FC<Props> = (\n  {\n    todos,\n    processingIds,\n    onDelete,\n    onUpdate,\n    tempTodo,\n  },\n) => {\n  const allTodos = tempTodo ? [...todos, tempTodo] : todos;\n\n  return (\n    <section className=\"todoapp__main\">\n      {\n        allTodos.map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            onDelete={onDelete}\n            onUpdate={onUpdate}\n            processingIds={processingIds}\n          />\n        ))\n      }\n    </section>\n  );\n};\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { Filter } from '../../types/Filter';\n\ntype Props = {\n  todos: Todo[];\n  filterBy: Filter;\n  setFilterBy: React.Dispatch<React.SetStateAction<Filter>>;\n  clearCompleted: () => void\n};\n\nexport const TodosFilter: React.FC<Props> = (\n  {\n    todos,\n    filterBy,\n    setFilterBy,\n    clearCompleted,\n  },\n) => {\n  const handleSetFilteredTodos = (filter: Filter) => () => {\n    setFilterBy(filter);\n  };\n\n  const completedTodosLength\n    = todos.filter(todo => todo.completed).length;\n\n  const uncompletedTodosLength\n    = todos.filter(todo => !todo.completed).length;\n\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${uncompletedTodosLength} items left`}\n      </span>\n      <nav className=\"filter\" data-cy=\"Filter\">\n        <a\n          href=\"#/\"\n          className={cn('filter__link', {\n            selected: (filterBy === Filter.all),\n          })}\n          onClick={handleSetFilteredTodos(Filter.all)}\n        >\n          All\n        </a>\n\n        <a\n          href=\"#/completed\"\n          className={cn('filter__link', {\n            selected: (filterBy === Filter.completed),\n          })}\n          onClick={handleSetFilteredTodos(Filter.completed)}\n        >\n          Completed\n        </a>\n\n        <a\n          href=\"#/active\"\n          className={cn('filter__link', {\n            selected: (filterBy === Filter.active),\n          })}\n          onClick={handleSetFilteredTodos(Filter.active)}\n        >\n          Active\n        </a>\n\n      </nav>\n      <button\n        data-cy=\"ClearCompletedButton\"\n        type=\"button\"\n        className={cn(\n          'todoapp__clear-completed',\n          {\n            hidden: !completedTodosLength,\n          },\n        )}\n        onClick={clearCompleted}\n        disabled={!completedTodosLength}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","// eslint-disable-next-line no-shadow\nexport enum ErrorMessage {\n  addError = 'Unable to add a todo',\n  deleteError = 'Unable to delete a todo',\n  updateError = 'Unable to update a todo',\n  loadError = 'Unable to load todos',\n  emptyTitle = 'Title can\\'t be empty',\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport cn from 'classnames';\nimport { UserWarning } from './UserWarning';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\nimport { ErrorMessage } from './types/ErrorMessage';\nimport { Filter } from './types/Filter';\nimport {\n  createTodo,\n  deleteTodo,\n  getTodos,\n  updateTodo,\n} from './api/todos';\n\nconst USER_ID = 11357;\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [error, setError] = useState<ErrorMessage | null>(null);\n  const [todoTitle, setTodoTitle] = useState<string>('');\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [filterBy, setFilterBy] = useState<Filter>(Filter.all);\n  const [processingIds, setProcessingIds] = useState<number[]>([]);\n\n  const showError = (errorType: ErrorMessage) => {\n    setIsError(true);\n    setError(errorType);\n    setTimeout(() => {\n      setIsError(false);\n      setError(null);\n    }, 3000);\n  };\n\n  const filteredTodos = useMemo(() => {\n    switch (filterBy) {\n      case Filter.active:\n        return todos.filter(todo => !todo.completed);\n      case Filter.completed:\n        return todos.filter(todo => todo.completed);\n      default:\n        return todos;\n    }\n  }, [filterBy, todos]);\n\n  const isAllCompleted\n    = todos.filter(todo => todo.completed).length === todos.length;\n\n  const isAllUncompleted\n    = todos.filter(todo => !todo.completed).length === todos.length;\n\n  const resetField = (): void => {\n    setTodoTitle('');\n    setIsError(false);\n    setError(null);\n  };\n\n  const handleDeleteTodo = (todoId: number) => {\n    setProcessingIds(current => [...current, todoId]);\n    deleteTodo(todoId)\n      .then(() => setTodos(\n        currentTodos => currentTodos.filter(todo => todo.id !== todoId),\n      ))\n      .catch(() => {\n        showError(ErrorMessage.deleteError);\n      })\n      .finally(() => setProcessingIds([]));\n  };\n\n  const handleUpdateTodo = (todo: Todo) => {\n    setProcessingIds(current => [...current, todo.id]);\n    const currentTodo = todos.filter(toDo => toDo.id === todo.id)[0];\n    const indexOfTodo = todos.indexOf(currentTodo);\n\n    updateTodo(todo)\n      .then(() => setTodos(\n        currentTodos => [\n          ...currentTodos.slice(0, indexOfTodo),\n          todo,\n          ...currentTodos.slice(indexOfTodo + 1),\n        ],\n      ))\n      .catch(() => {\n        showError(ErrorMessage.updateError);\n      })\n      .finally(() => setProcessingIds([]));\n  };\n\n  const clearCompleted = () => {\n    todos.map(todo => {\n      if (todo.completed) {\n        setProcessingIds(current => [...current, todo.id]);\n        handleDeleteTodo(todo.id);\n      }\n\n      return todo;\n    });\n  };\n\n  const handleToggleAll = () => {\n    if (isAllCompleted || isAllUncompleted) {\n      todos.map(todo => handleUpdateTodo({\n        ...todo,\n        completed: !todo.completed,\n      }));\n    } else {\n      todos.map(todo => !todo.completed && handleUpdateTodo({\n        ...todo,\n        completed: !todo.completed,\n      }));\n    }\n  };\n\n  const handleAddTodo = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!todoTitle.trim()) {\n      showError(ErrorMessage.emptyTitle);\n\n      return;\n    }\n\n    const newTodo: Todo = {\n      id: Math.max(...todos.map(todo => todo.id)) + 1,\n      title: todoTitle,\n      userId: USER_ID,\n      completed: false,\n    };\n\n    setTempTodo({ ...newTodo, id: 0 });\n\n    setProcessingIds(current => [...current, 0]);\n    createTodo(newTodo)\n      .then(newToDo => {\n        setTodos(currentTodos => [...currentTodos, newToDo]);\n        resetField();\n      })\n      .catch(() => {\n        setTempTodo(null);\n        showError(ErrorMessage.addError);\n      })\n      .finally(() => {\n        setTempTodo(null);\n        setProcessingIds([]);\n      });\n\n    resetField();\n  };\n\n  useEffect(() => {\n    getTodos(USER_ID)\n      .then(data => {\n        const todosData = data as Todo[];\n\n        setTodos(todosData);\n      })\n      .catch(() => {\n        showError(ErrorMessage.loadError);\n      });\n  }, []);\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <header className=\"todoapp__header\">\n          {todos.length > 0 && (\n            <button\n              type=\"button\"\n              aria-label=\"button\"\n              onClick={handleToggleAll}\n              className={\n                cn(\n                  'todoapp__toggle-all',\n                  {\n                    active: isAllCompleted,\n                  },\n                )\n              }\n            />\n          )}\n          <form onSubmit={handleAddTodo}>\n            <input\n              type=\"text\"\n              className=\"todoapp__new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={todoTitle}\n              onChange={event => setTodoTitle(event.target.value)}\n              disabled={!!tempTodo}\n            />\n          </form>\n        </header>\n\n        <TodoList\n          todos={filteredTodos}\n          onDelete={handleDeleteTodo}\n          onUpdate={handleUpdateTodo}\n          processingIds={processingIds}\n          tempTodo={tempTodo}\n        />\n\n        {\n          todos.length > 0 && (\n            <TodosFilter\n              todos={todos}\n              filterBy={filterBy}\n              setFilterBy={setFilterBy}\n              clearCompleted={clearCompleted}\n            />\n          )\n        }\n      </div>\n\n      {isError && (\n        <div className=\"notification is-danger is-light has-text-weight-normal\">\n          <button\n            type=\"button\"\n            className=\"delete\"\n            aria-label=\"button\"\n            onClick={() => setIsError(false)}\n          />\n          {error}\n          <br />\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const createTodo = (\n  {\n    id, title, completed, userId,\n  }: Todo,\n) => {\n  return client.post<Todo>(\n    '/todos',\n    {\n      id,\n      title,\n      completed,\n      userId,\n    },\n  );\n};\n\nexport const deleteTodo = (id: number) => {\n  return client.delete(`/todos/${id}`);\n};\n\nexport const updateTodo = (\n  {\n    id, title, completed, userId,\n  }: Todo,\n) => {\n  return client.patch<Todo>(\n    `/todos/${id}`,\n    {\n      id,\n      title,\n      completed,\n      userId,\n    },\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}